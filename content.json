{"meta":{"title":"supredu的博客","subtitle":"","description":"blockchain fabric","author":"supredu","url":"http://supredu.github.io","root":"/"},"pages":[{"title":"","date":"2021-08-10T08:44:29.081Z","updated":"2021-08-10T08:44:29.081Z","comments":true,"path":"404.html","permalink":"http://supredu.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2021-08-09T13:43:59.627Z","updated":"2021-08-09T13:43:59.627Z","comments":true,"path":"about/index.html","permalink":"http://supredu.github.io/about/index.html","excerpt":"","text":"国家一级空气投篮运动员"},{"title":"所有分类","date":"2021-08-08T09:12:40.992Z","updated":"2021-08-08T09:12:40.992Z","comments":true,"path":"categories/index.html","permalink":"http://supredu.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2021-08-09T09:29:40.125Z","updated":"2021-08-09T09:29:40.125Z","comments":true,"path":"css/sheep.css","permalink":"http://supredu.github.io/css/sheep.css","excerpt":"","text":"@font-face { font-family: \"iconfont\"; /* Project id 2732601 */ src: url('//at.alicdn.com/t/font_2732601_zaczpivuaal.woff2?t=1628501373420') format('woff2'), url('//at.alicdn.com/t/font_2732601_zaczpivuaal.woff?t=1628501373420') format('woff'), url('//at.alicdn.com/t/font_2732601_zaczpivuaal.ttf?t=1628501373420') format('truetype'); } .iconfont { font-family: \"iconfont\" !important; font-size: 16px; font-style: normal; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } .icon-miao:before { content: \"\\e620\"; } .icon-qukuailian:before { content: \"\\e6a1\"; } .icon-shijianxian:before { content: \"\\e674\"; } .icon-GitHub:before { content: \"\\e8c6\"; } .icon-sheep:before { content: \"\\e613\"; }"},{"title":"friends","date":"2021-08-08T09:15:38.000Z","updated":"2021-08-08T09:15:38.222Z","comments":true,"path":"friends/index.html","permalink":"http://supredu.github.io/friends/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2023-02-24T08:55:45.649Z","updated":"2021-08-08T09:13:28.597Z","comments":true,"path":"tags/index.html","permalink":"http://supredu.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"stablecoin 学习1","slug":"stablecoin-学习","date":"2023-03-01T13:22:26.000Z","updated":"2023-03-06T13:12:27.477Z","comments":true,"path":"2023/03/01/stablecoin-学习/","link":"","permalink":"http://supredu.github.io/2023/03/01/stablecoin-%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"经济模型1代表了一个经济进程 2含有多种变量 3变量之间有逻辑上或者数量上的关系 CeFi and DeFi利率：DeFi&gt;CeFi DeFi经济模型的变量包括加密货币的价格、平台抵押率、DeFi的协议费、gas费、使用者的数量、链的tps 外源性变量与内源性变量外源性变量：模型外部决定，并对模型产生影响 e.g.:在MakerDAO中，抵押物的资产价格是独立于MakerDAO系统的 内源性变量：由模型决定 e.g.: Synthetix平台，衍生物由SNX抵押mint出,SNX为平台币。 银行存款准备金率=银行持有的钱/用户存在银行的钱Exchange Traded Fund(ETF)ETF在市场关闭时也买入卖出 ETF通常是股票或债券的集合，并由专业人士管理 ETF类型：债券、股票、行业、商品、货币、inverse(做空某项) 稳定币的稳定怎么定义稳定是一种相对稳定 指标： 波动性 回报标准差 一段时间的最大下跌率 法定货币也会有6~12%的波动性 稳定币种分类USDC USDT：reserve-based 发一个币就存进一美金 DAI：collateral-based 抵押稳定币，一般是超额抵押 algotithmic纯算法币 稳定币的稳定只是和别的稳定币相比","categories":[],"tags":[{"name":"stablecoin defi","slug":"stablecoin-defi","permalink":"http://supredu.github.io/tags/stablecoin-defi/"}]},{"title":"","slug":"Avatar","date":"2023-02-26T17:09:16.915Z","updated":"2023-02-26T17:09:16.915Z","comments":true,"path":"2023/02/27/Avatar/","link":"","permalink":"http://supredu.github.io/2023/02/27/Avatar/","excerpt":"","text":"# Avatar ## 案件描述 Avatar项目于2023年2月8日部署至polygon链,以超高收益率（单利静态最高收益超过30%月化每天）吸引大量用户入场且主要用户为中国大陆用户。至2023年2月26日预估入金接近14亿人民币，项目方收益超过2763万人民币。其代码逻辑与传销如出一辙，以上线拉下线进场为主要收益手段，散户进场风险极高，操盘手已经收割了1级魔盒12次，2级魔盒1次，造成散户巨额经济损失，对社会危害极大。 ## 合约介绍 + ReentrancyGuard.sol合约类似于保证串行化交易，一定程度上防止重入攻击和保证call函数的安全+ Avatar.sol合约为业务的主要合约，极其重要的函数分别有OpenPosition 和 ClosePosition两种+ Bucket.sol合约主要是用来生成随机天数的 ## 项目用途 + 本项目为用户提供了两种盈利方式，第一种通过购买盒子，也就是Position来获取定期收益，称为静态收益,第二种通过类似于发展下级来获取动态收益。 ## 静态收益 用户可以选择1到6种不同的盒子来购买，每种不同的盒子需要锁定不同的天数才能开启，每种盒子每一轮单独成池，日收益率初始为1%，范围在0.3%-1.5% 魔盒I——24小时满，可随时提取种子和回报 魔盒II ——3-8日为一个周期（随机生成日期） 魔盒III ——9-16日为一个周期 磨合IV ——17-31日为一个周期 魔盒V ——32-91日为一个周期 魔盒VI ——92-181日为一个周期。 每个盒子的收益与Avatar合约里FundTarget中Amount和targetAmount相关，当预期的募集资金超过了现有的资金总量，会降低获得的收益率（每超过targetAmount20%降低0.05%，保底收益0.3%）。不仅如此,每个盒子的收益率还与userGrobalInfo里面的boostCredit（止损时获得）相挂钩，可以使用boostCredit提高0.5%收益率。 &gt; 注意:用户在投资静态收益的时候，所投资的金额有5种取出:①、保本资金(65%),②、平台抽成(2%)、③、激励池(幸运儿池)(1%)、④、静态收益池(26%)、⑤、动态收益池(发展下级)(6%) 当且仅当静态收益池为空的时候，开启下一个纪元 ## 动态收益 用户可以发展下级来获取动态收益，动态收益的获取主要为两个方面:官方称为:精灵奖和部落奖。分别占据购买盒子的金额的百分之1.2和百分之4.8，动态收益单独收取。 ### 精灵奖 用户所处的社区等级决定了他能让多少个上级获利,根据Avatar.sol合约里面的_getLevelToLevelSearchStep函数表明,当社区等级大于等于5时,用户最多能让10个上级分别获得0.12%的收益，当社区等级小于5时,用户的上级在分享了精灵奖后,剩余的资金将返回给用户的referrerAmount(代理收益中) ### 部落奖 该游戏强调部落这个概念，该游戏将部落分为12个等级,每个等级有不同的利润抽成,当用户购买了盒子以后,用户的上级会根据当前的部落等级差进行利润抽成,当部落等级差距越大时,代理方会获得更多的收益,当用户的部落奖金还未分配完时,剩余的资金将返回给用户的referrerAmount(代理收益中) ## 幸运儿奖 为了鼓励用户的积极参与,在爆仓后,会给予最后参与的60个盒子拥有者分享来自于激励池里面的全部奖金,具体的分配金额与该六十个盒子所投资金额占比有关。 ## 功能描述 &gt; 具体对项目源码的解读全部在合约里面有注释，主要介绍给用户提供的两种重要方法 ### OpenPosition + 首先判断所购买的箱子类型是否合法,并且判断所投资的金额是否合理，以及参加的轮数是否合理，以及游戏是否开启+ 计算当前投资收益率+ 根据选择是否增强收益(通过boostCredit)+ 分配6%给上级(动态收益)+ 转给平台2% ### ClosePosition + 从保本资金池里面取出65%+ 如果静态收益池里面有，则取出所属部分的收益和另外本金，否则尽量满足+ 判断此盒子是否是幸运儿盒,如果是则领取幸运儿奖+ 判断是否亏钱，除开如果存在的幸运儿的奖励,如果亏钱则增加boostCredit+ 转账给用户最终的金额 ## 项目方盈利情况 + 首先是每笔交易的平台抽成(2%) 项目方地址：0x9cA75D0d97f0b86dEa852Eb0a626F7839673d9D9（platformaddress） 因为该地址没有转出记录，所以可以估算项目方入金将近14亿人民币，收益超过2763万人民币。 + 但是根据功能分析后显示,最初的referrer的创建必须要有admin权限(batchSetReferrerInfo函数),由项目方admin创建。而根据实际调研来看，项目方将这些初始化地址的部落等级设置成10级甚至是12级，如果这些地址是项目方成员拥有，则不仅可以获得巨额拉下线收益，也可以进行操盘获益。 ## 代码缺点 + UserRoundInfo里面的returnRateBoostedAmount似乎没有在Avatar和bucket中用到","categories":[],"tags":[]},{"title":"对avatar合约的分析","slug":"对avatar合约的分析","date":"2023-02-25T15:53:56.000Z","updated":"2023-02-26T17:16:57.961Z","comments":true,"path":"2023/02/25/对avatar合约的分析/","link":"","permalink":"http://supredu.github.io/2023/02/25/%E5%AF%B9avatar%E5%90%88%E7%BA%A6%E7%9A%84%E5%88%86%E6%9E%90/","excerpt":"","text":"dapp地址：https://dgfavatar.com/ avatar合约地址：https://polygonscan.com/address/0xc7728354f9fe0e43514b1227162d5b0e40fad410#code 共三个合约：ReentrancyGuard.sol、Avatar.sol、Bucket.sol ReentrancyGuard.sol： 此合约为重入攻击防范 Bucket.sol： 盲盒合约 获得一个随机盲盒 Avatar.sol（重点研究） struct UserGlobalInfo {//用户信息 ​ // referrer chain to record the referrer relationship ​ address referrer; ​ // referrer rearward vault ​ uint256 totalReferrerReward; ​ uint256 referrerRewardClaimed; ​ // boost credit ​ uint256 boostCredit; ​ // sales record ​ uint256 maxChildrenSales; ​ uint256 sales; ​ uint256 totalPositionAmount; ​ uint256 reportedSales; ​ uint8 salesLevel; } struct RoundInfo { ​ FundTarget fundTarget; ​ uint256 totalPositionAmount; // total amount of all positions ​ uint256 currentPrincipalAmount; // current principal amount ​ uint256 currentInvestAmount; // current invest amount ​ uint256 totalPositionCount; // total count of all positions ​ uint256 currentPositionCount; // total count of all open positions ​ uint256 currentIncentiveAmount; // current incentive amount ​ uint256 incentiveSnapshot; // check total position of last N positions ​ uint256 head; // head of linked position for last N positions ​ mapping(uint256 =&gt; LinkedPosition) linkedPositions; // used for incentive track ​ mapping(address =&gt; uint256) ledgerRoundToUserRoundIndex; // this round index in userRoundsInfos ​ bool stopLoss; // default false means the round is running } ledgertype：魔盒1-6 position:魔盒 epoch:轮数","categories":[],"tags":[{"name":"blockchain security","slug":"blockchain-security","permalink":"http://supredu.github.io/tags/blockchain-security/"}]},{"title":"从0到1完成一个简单的dapp","slug":"从0到1完成一个简单的dapp","date":"2023-02-23T02:09:45.000Z","updated":"2023-02-24T10:00:02.638Z","comments":true,"path":"2023/02/23/从0到1完成一个简单的dapp/","link":"","permalink":"http://supredu.github.io/2023/02/23/%E4%BB%8E0%E5%88%B01%E5%AE%8C%E6%88%90%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84dapp/","excerpt":"","text":"架构：Hardhat Solidity ReactJs Ethers.js | Goerli Testnet | Netlify将项目克隆下来git clone https://github.com/supredu/TipMeDapp vscode打开项目文件夹 终端输入npm install 终端切换到frontend文件夹输入npm install 编辑变量 Alchemy创建app 复制网址链接粘到GOERLI_url 导出metamask私钥粘贴到PRIVATE_KEY 将合约发布到goerli testnet输入命令npx hardhat run –network goerli scripts/testnet_deploy.js 将地址粘贴到App.js的contractAddress 用artifacts/contracts中生成的TipMe.json替换掉frontend/src/contract中的TipMe.json 切换到frontend目录 使用命令npm start生成网页 使用metamask与dapp交互 交互成功 使用Netlify将合约发布到互联网输入命令npm run build 选择mannualy deployed将build文件夹上传 生成网页 修改网页名称 交互尝试成功 总结完整学习了dapp的构成与交互（链端+前端模式），可以以此为基础自行尝试搭建defi或相关有价值的dapp。","categories":[{"name":"dapp","slug":"dapp","permalink":"http://supredu.github.io/categories/dapp/"}],"tags":[{"name":"dapp","slug":"dapp","permalink":"http://supredu.github.io/tags/dapp/"}]},{"title":"test2","slug":"test2","date":"2023-02-21T07:44:41.000Z","updated":"2023-02-24T09:05:48.892Z","comments":true,"path":"2023/02/21/test2/","link":"","permalink":"http://supredu.github.io/2023/02/21/test2/","excerpt":"","text":"图床测试","categories":[{"name":"test","slug":"test","permalink":"http://supredu.github.io/categories/test/"}],"tags":[]},{"title":"hardhat学习","slug":"hardhat学习","date":"2023-02-21T03:42:08.357Z","updated":"2023-02-21T03:47:37.167Z","comments":true,"path":"2023/02/21/hardhat学习/","link":"","permalink":"http://supredu.github.io/2023/02/21/hardhat%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"hardhat安装打开命令行工具，输入： 1234mkdir hardhat-democd hardhat-demonpm init -ynpm install --save-dev hardhat 创建hardhat项目打开命令行工具（windows最好是powershell），输入： 12cd hardhat-demonpx hardhat 选择第三项：创建空白项目配置 Create an empty hardhat.config.js 1234567👷 Welcome to Hardhat v2.9.9 👷‍? What do you want to do? … Create a JavaScript project Create a TypeScript project❯ Create an empty hardhat.config.js Quit 安装插件1npm install --save-dev @nomiclabs/hardhat-ethers ethers @nomiclabs/hardhat-waffle ethereum-waffle chai 这里安装的是ether.js和waffle插件 修改hardhat.config.js文件将require(&quot;@nomiclabs/hardhat-waffle&quot;); 添加到你的hardhat.config.js中，如下所示： 12345678require(&quot;@nomiclabs/hardhat-waffle&quot;);/** * @type import(&#x27;hardhat/config&#x27;).HardhatUserConfig */module.exports = &#123; solidity: &quot;0.7.3&quot;,&#125;; 这里引入hardhat-waffle，因为它依赖于hardhat-ethers，因此不需要同时添加两个。 编写合约新建contracts文件夹 文件夹下创建Token.sol合约文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960// Solidity files have to start with this pragma.// It will be used by the Solidity compiler to validate its version.pragma solidity ^0.7.0;// This is the main building block for smart contracts.contract Token &#123; // Some string type variables to identify the token. // The `public` modifier makes a variable readable from outside the contract. string public name = &quot;My Hardhat Token&quot;; string public symbol = &quot;MBT&quot;; // 固定发行量，保存在一个无符号整型里 uint256 public totalSupply = 1000000; // An address type variable is used to store ethereum accounts. address public owner; // A mapping is a key/value map. Here we store each account balance. mapping(address =&gt; uint256) balances; /** * 合约构造函数 * * The `constructor` is executed only once when the contract is created. */ constructor() &#123; // The totalSupply is assigned to transaction sender, which is the account // that is deploying the contract. balances[msg.sender] = totalSupply; owner = msg.sender; &#125; /** * 代币转账. * * The `external` modifier makes a function *only* callable from outside * the contract. */ function transfer(address to, uint256 amount) external &#123; // Check if the transaction sender has enough tokens. // If `require`&#x27;s first argument evaluates to `false` then the // transaction will revert. require(balances[msg.sender] &gt;= amount, &quot;Not enough tokens&quot;); // Transfer the amount. balances[msg.sender] -= amount; balances[to] += amount; &#125; /** * 返回账号的代币余额，只读函数。 * * The `view` modifier indicates that it doesn&#x27;t modify the contract&#x27;s * state, which allows us to call it without executing a transaction. */ function balanceOf(address account) external view returns (uint256) &#123; return balances[account]; &#125;&#125; 编译合约输入命令npx hardhat compile 出现问题 Error HH606: The project cannot be compiled, see reasons below. The Solidity version pragma statement in these files doesn’t match any of the configured compilers in your config. Change the pragma or configure additional compiler versions in your hardhat config. contracts/Token.sol (^0.7.0) To learn more, run the command again with –verbose Read about compiler configuration at https://hardhat.org/config 发现是hardhat.config.js的solidity版本与sol文件版本不一致，于是修改合约中pragma solidity ^0.7.0;为pragma solidity 0.8.17； 显示成功 Compiled 1 Solidity file successfully 测试合约在项目根目录中创建一个名为test的新目录，并创建一个名为Token.js的新文件。 让我们从下面的代码开始。 在后面我们将对其进行解释，但现在将其粘贴到Token.js中： 1234567891011121314const &#123; expect &#125; = require(&quot;chai&quot;);describe(&quot;Token contract&quot;, function() &#123; it(&quot;Deployment should assign the total supply of tokens to the owner&quot;, async function() &#123; const [owner] = await ethers.getSigners(); const Token = await ethers.getContractFactory(&quot;Token&quot;); const hardhatToken = await Token.deploy(); const ownerBalance = await hardhatToken.balanceOf(owner.address); expect(await hardhatToken.totalSupply()).to.equal(ownerBalance); &#125;);&#125;); 运行npx hardhat test 1234567$ npx hardhat test Token contract ✓ Deployment should assign the total supply of tokens to the owner (654ms) 1 passing (663ms) 测试通过! 部署合约新建一个scripts文件夹，我们来编写部署合约脚本。并在该目录下新建一个deploy.js // 我们可以通过 npx hardhat run 来运行想要的脚本// 这里你可以使用 npx hardhat run deploy.js 来运行const hre = require(\"hardhat\"); async function main() { const Contract = await hre.ethers.getContractFactory(“ERC20”); const token = await Contract.deploy(“WTF”,”WTF”); await token.deployed(); console.log(“成功部署合约:”, token.address);} // 运行脚本main().catch((error) =&gt; { console.error(error); process.exitCode = 1;}); hardhat会提供一个默认的网络，参考：(https://hardhat.org/hardhat-network/docs/overview) 1npx hardhat run --network hardhat scripts/deploy.js 成功部署合约: 0x5FbDB2315678afecb367f032d93F642f64180aa3 Goerli测试网部署修改hardhat.config.js // 我们可以通过 npx hardhat run 来运行想要的脚本// 这里你可以使用 npx hardhat run deploy.js 来运行const hre = require(\"hardhat\"); async function main() { const Contract = await hre.ethers.getContractFactory(“ERC20”); const token = await Contract.deploy(“WTF”,”WTF”); await token.deployed(); console.log(“成功部署合约:”, token.address);} // 运行脚本main().catch((error) =&gt; { console.error(error); process.exitCode = 1;}); 配置完成运行 npx hardhat run –network goerli scripts/deploy.js","categories":[{"name":"blockchain","slug":"blockchain","permalink":"http://supredu.github.io/categories/blockchain/"}],"tags":[{"name":"blockchain","slug":"blockchain","permalink":"http://supredu.github.io/tags/blockchain/"}]},{"title":"test","slug":"test","date":"2021-08-08T09:31:53.000Z","updated":"2023-02-27T08:36:36.530Z","comments":true,"path":"2021/08/08/test/","link":"","permalink":"http://supredu.github.io/2021/08/08/test/","excerpt":"","text":"今夜月色很美 XRQSVA3VZWD5SXG2","categories":[{"name":"test","slug":"test","permalink":"http://supredu.github.io/categories/test/"}],"tags":[{"name":"blockchain","slug":"blockchain","permalink":"http://supredu.github.io/tags/blockchain/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-08-05T12:47:05.291Z","updated":"2021-08-05T12:47:05.291Z","comments":true,"path":"2021/08/05/hello-world/","link":"","permalink":"http://supredu.github.io/2021/08/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"dapp","slug":"dapp","permalink":"http://supredu.github.io/categories/dapp/"},{"name":"test","slug":"test","permalink":"http://supredu.github.io/categories/test/"},{"name":"blockchain","slug":"blockchain","permalink":"http://supredu.github.io/categories/blockchain/"}],"tags":[{"name":"stablecoin defi","slug":"stablecoin-defi","permalink":"http://supredu.github.io/tags/stablecoin-defi/"},{"name":"blockchain security","slug":"blockchain-security","permalink":"http://supredu.github.io/tags/blockchain-security/"},{"name":"dapp","slug":"dapp","permalink":"http://supredu.github.io/tags/dapp/"},{"name":"blockchain","slug":"blockchain","permalink":"http://supredu.github.io/tags/blockchain/"}]}